   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
   9               		.text
  10               	.Ltext0:
  11               	.global	__vector_3
  13               	__vector_3:
  14               	.LFB4:
  15               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <avr/interrupt.h>
   3:main.c        **** #define F_CPU (F_OSC)
   4:main.c        **** 
   5:main.c        **** #include <util/delay.h>
   6:main.c        **** 
   7:main.c        **** #define NTC_PORT PORTF
   8:main.c        **** #define NTC_DDR DDRF
   9:main.c        **** #define NTC_PIN (PF3)
  10:main.c        **** 
  11:main.c        **** #define MOTOR_PORT PORTE
  12:main.c        **** #define MOTOR_DDR DDRE
  13:main.c        **** #define MOTOR_PIN_L PE7
  14:main.c        **** #define MOTOR_PIN_R PE6
  15:main.c        **** 
  16:main.c        **** #define MOTOR_SENSE_DDR DDRE
  17:main.c        **** #define MOTOR_SENSE_PORT PORTE
  18:main.c        **** #define MOTOR_SENSE_PIN PE2
  19:main.c        **** 
  20:main.c        **** #define SWITCH_PORT PORTB
  21:main.c        **** #define SWITCH_PIN PINB
  22:main.c        **** #define SWITCH_DDR DDRB
  23:main.c        **** #define SWITCH_PLUS PB0
  24:main.c        **** #define SWITCH_MINUS PB7
  25:main.c        **** #define SWITCH_MENU PB5
  26:main.c        **** #define SWITCH_OK PB6
  27:main.c        **** #define SWITCH_CLOCK PB4
  28:main.c        **** #define SWITCH_ALL ((1 << SWITCH_PLUS) | (1 << SWITCH_MINUS) | (1 << SWITCH_CLOCK) | (1 << SWITCH_M
  29:main.c        **** 
  30:main.c        **** #define ADC_CH_MOTOR (2)
  31:main.c        **** #define ADC_CH_NTC (1)
  32:main.c        **** #define ADC_CH_MOTOR_SENSE (0)
  33:main.c        **** #define ADC_CH_BAT (14)
  34:main.c        **** 
  35:main.c        **** 
  36:main.c        **** #define SLEEP_POWERSAVE ((1 << SM1) | (1 << SM0))
  37:main.c        **** #define SLEEP SLEEP_POWERSAVE
  38:main.c        **** 
  39:main.c        **** enum IRFlags {FLAG_KEY_PRESSED = 1};
  40:main.c        **** 
  41:main.c        **** volatile uint8_t KeysPressed;
  42:main.c        **** volatile uint8_t Flags;
  43:main.c        **** 
  44:main.c        **** ISR(PCINT1_vect)
  45:main.c        **** {
  16               		.loc 1 45 0
  17 0000 1F92      		push r1
  18               	.LCFI0:
  19 0002 0F92      		push r0
  20               	.LCFI1:
  21 0004 0FB6      		in r0,__SREG__
  22 0006 0F92      		push r0
  23 0008 1124      		clr __zero_reg__
  24 000a 2F93      		push r18
  25               	.LCFI2:
  26 000c 8F93      		push r24
  27               	.LCFI3:
  28 000e 9F93      		push r25
  29               	.LCFI4:
  30               	/* prologue: Signal */
  31               	/* frame size = 0 */
  32               	/* stack size = 6 */
  33               	.L__stack_usage = 6
  46:main.c        ****   /* This is crap :) */
  47:main.c        ****   uint8_t keys = SWITCH_PIN;
  34               		.loc 1 47 0
  35 0010 23B1      		in r18,35-0x20
  36               	.LVL0:
  37               	.LBB12:
  38               	.LBB13:
  39               	.LBB14:
  40               	.LBB15:
  41               		.file 2 "/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h"
   1:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    All rights reserved.
   4:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
   5:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
   8:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  11:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****      distribution.
  15:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  16:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  20:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  32:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h 2143 2010-06-08 21:19:51Z joerg_wunsch $ */
  33:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  34:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  37:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  39:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  40:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  41:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  42:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** #endif
  43:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  44:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** /** \file */
  45:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  46:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     \code
  47:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  48:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     \endcode
  49:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  50:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  51:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  52:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  53:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  54:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  55:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  56:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  57:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  58:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  59:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  60:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  61:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  62:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  63:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     to the overall delay time.
  64:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  65:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  66:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  67:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** */
  68:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  69:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  71:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     register.
  76:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  77:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     can be achieved.
  79:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** */
  80:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** void
  81:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** {
  83:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 	);
  89:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** }
  90:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  91:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  93:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     counter register pair.
  98:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  99:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****  */
 102:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** void
 103:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** {
 105:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  42               		.loc 2 105 0
  43 0012 84EC      		ldi r24,lo8(2500)
  44 0014 99E0      		ldi r25,hi8(2500)
  45               	/* #APP */
  46               	 ;  105 "/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h" 1
  47 0016 0197      		1: sbiw r24,1
  48 0018 01F4      		brne 1b
  49               	 ;  0 "" 2
  50               	.LVL1:
  51               	/* #NOAPP */
  52               	.LBE15:
  53               	.LBE14:
  54               	.LBE13:
  55               	.LBE12:
  48:main.c        ****   _delay_ms(10);
  49:main.c        ****   keys |= SWITCH_PIN;
  56               		.loc 1 49 0
  57 001a 83B1      		in r24,35-0x20
  58               	.LVL2:
  59 001c 822B      		or r24,r18
  60               	.LVL3:
  50:main.c        ****   keys = ~keys;
  61               		.loc 1 50 0
  62 001e 8095      		com r24
  63               	.LVL4:
  51:main.c        ****   KeysPressed = keys;
  64               		.loc 1 51 0
  65 0020 8093 0000 		sts KeysPressed,r24
  52:main.c        ****   Flags |= FLAG_KEY_PRESSED;
  66               		.loc 1 52 0
  67 0024 8091 0000 		lds r24,Flags
  68               	.LVL5:
  69 0028 8160      		ori r24,lo8(1)
  70 002a 8093 0000 		sts Flags,r24
  71               	/* epilogue start */
  53:main.c        **** }
  72               		.loc 1 53 0
  73 002e 9F91      		pop r25
  74 0030 8F91      		pop r24
  75 0032 2F91      		pop r18
  76 0034 0F90      		pop r0
  77 0036 0FBE      		out __SREG__,r0
  78 0038 0F90      		pop r0
  79 003a 1F90      		pop r1
  80 003c 1895      		reti
  81               	.LFE4:
  83               	.global	sysSleep
  85               	sysSleep:
  86               	.LFB5:
  54:main.c        **** 
  55:main.c        **** void sysSleep(void)
  56:main.c        **** {
  87               		.loc 1 56 0
  88               	/* prologue: function */
  89               	/* frame size = 0 */
  90               	/* stack size = 0 */
  91               	.L__stack_usage = 0
  57:main.c        ****   SMCR = SLEEP | (1 << SE);
  92               		.loc 1 57 0
  93 003e 87E0      		ldi r24,lo8(7)
  94 0040 83BF      		out 83-0x20,r24
  58:main.c        ****   ADCSRA &= (1 << ADEN);		// Disable ADC
  95               		.loc 1 58 0
  96 0042 EAE7      		ldi r30,lo8(122)
  97 0044 F0E0      		ldi r31,hi8(122)
  98 0046 8081      		ld r24,Z
  99 0048 8078      		andi r24,lo8(-128)
 100 004a 8083      		st Z,r24
 101               	/* epilogue start */
  59:main.c        ****   // execute sleep *TODO*
  60:main.c        **** }
 102               		.loc 1 60 0
 103 004c 0895      		ret
 104               	.LFE5:
 106               	.global	pwrInit
 108               	pwrInit:
 109               	.LFB6:
  61:main.c        **** 
  62:main.c        **** void pwrInit(void)
  63:main.c        **** {
 110               		.loc 1 63 0
 111               	/* prologue: function */
 112               	/* frame size = 0 */
 113               	/* stack size = 0 */
 114               	.L__stack_usage = 0
  64:main.c        ****   PRR = (1 << PRTIM1) | (1 << PRSPI) | (1 << PRUSART0); // disable some hardware
 115               		.loc 1 64 0
 116 004e 8EE0      		ldi r24,lo8(14)
 117 0050 8093 6400 		sts 100,r24
 118               	/* epilogue start */
  65:main.c        **** }
 119               		.loc 1 65 0
 120 0054 0895      		ret
 121               	.LFE6:
 123               	.global	ioInit
 125               	ioInit:
 126               	.LFB7:
  66:main.c        **** 
  67:main.c        **** void ioInit(void)
  68:main.c        **** {
 127               		.loc 1 68 0
 128               	/* prologue: function */
 129               	/* frame size = 0 */
 130               	/* stack size = 0 */
 131               	.L__stack_usage = 0
  69:main.c        ****   NTC_DDR |= (1 << NTC_PIN);
 132               		.loc 1 69 0
 133 0056 839A      		sbi 48-0x20,3
  70:main.c        ****  
  71:main.c        ****   MOTOR_PORT &= (1 << MOTOR_PIN_L) | (1 << MOTOR_PIN_R);
 134               		.loc 1 71 0
 135 0058 8EB1      		in r24,46-0x20
 136 005a 807C      		andi r24,lo8(-64)
 137 005c 8EB9      		out 46-0x20,r24
  72:main.c        ****   MOTOR_DDR = (1 << MOTOR_PIN_L) | (1 << MOTOR_PIN_R);
 138               		.loc 1 72 0
 139 005e 80EC      		ldi r24,lo8(-64)
 140 0060 8DB9      		out 45-0x20,r24
  73:main.c        ****   
  74:main.c        ****   MOTOR_SENSE_DDR = (1 << MOTOR_SENSE_PIN);
 141               		.loc 1 74 0
 142 0062 84E0      		ldi r24,lo8(4)
 143 0064 8DB9      		out 45-0x20,r24
  75:main.c        **** 
  76:main.c        ****   SWITCH_PORT = SWITCH_ALL; // Pullups
 144               		.loc 1 76 0
 145 0066 81EF      		ldi r24,lo8(-15)
 146 0068 85B9      		out 37-0x20,r24
 147               	/* epilogue start */
  77:main.c        ****   
  78:main.c        **** }
 148               		.loc 1 78 0
 149 006a 0895      		ret
 150               	.LFE7:
 152               	.global	buttonInit
 154               	buttonInit:
 155               	.LFB8:
  79:main.c        **** 
  80:main.c        **** void buttonInit(void)
  81:main.c        **** {
 156               		.loc 1 81 0
 157               	/* prologue: function */
 158               	/* frame size = 0 */
 159               	/* stack size = 0 */
 160               	.L__stack_usage = 0
  82:main.c        ****   EIMSK |= PCIE1;	//PC-INT 8..15
 161               		.loc 1 82 0
 162 006c 8DB3      		in r24,61-0x20
 163 006e 8760      		ori r24,lo8(7)
 164 0070 8DBB      		out 61-0x20,r24
  83:main.c        ****   PCMSK1 |= SWITCH_ALL; // Enable all switches PC-INT
 165               		.loc 1 83 0
 166 0072 ECE6      		ldi r30,lo8(108)
 167 0074 F0E0      		ldi r31,hi8(108)
 168 0076 8081      		ld r24,Z
 169 0078 816F      		ori r24,lo8(-15)
 170 007a 8083      		st Z,r24
 171               	/* epilogue start */
  84:main.c        **** }
 172               		.loc 1 84 0
 173 007c 0895      		ret
 174               	.LFE8:
 176               	.global	lcdInit
 178               	lcdInit:
 179               	.LFB9:
  85:main.c        **** 
  86:main.c        **** 
  87:main.c        **** void lcdInit(void)
  88:main.c        **** {
 180               		.loc 1 88 0
 181               	/* prologue: function */
 182               	/* frame size = 0 */
 183               	/* stack size = 0 */
 184               	.L__stack_usage = 0
  89:main.c        **** LCDCRB = (1<<LCDCS)|(0<<LCD2B)|(1<<LCDMUX1)|(1<<LCDMUX0)|(1<<LCDPM2)|(1<<LCDPM1)|(1<<LCDPM0);
 185               		.loc 1 89 0
 186 007e 87EB      		ldi r24,lo8(-73)
 187 0080 8093 E500 		sts 229,r24
  90:main.c        **** /*
  91:main.c        ****       (1<<LCDCS)                            // Das LCD wird im asynchronen Modus (LCDCS-Bit=1)
  92:main.c        ****                                                mit der Frequenz des Quarzes TOSC1 = 32.768Hz als LC
  93:main.c        ****       |(0<<LCD2B)                           // 1/3 bias is used
  94:main.c        ****       |(1<<LCDMUX1)|(1<<LCDMUX0)            // 1/4 Duty; COM0:3;
  95:main.c        ****       |(1<<LCDPM2)|(1<<LCDPM1)|(1<<LCDPM0); // SEG0:24
  96:main.c        **** */
  97:main.c        ****  
  98:main.c        **** LCDFRR = (0<<LCDPS2)|(0<<LCDPS1)|(0<<LCDPS0)|(0<<LCDCD2)|(0<<LCDCD1)|(1<<LCDCD0);
 188               		.loc 1 98 0
 189 0084 81E0      		ldi r24,lo8(1)
 190 0086 8093 E600 		sts 230,r24
  99:main.c        **** /*
 100:main.c        ****       (0<<LCDPS2)|(0<<LCDPS1)|(0<<LCDPS0)    // N = 16
 101:main.c        ****       |(0<<LCDCD2)|(0<<LCDCD1)|(1<<LCDCD0);  // D = 2
 102:main.c        ****       // ergo f(frame) = 128Hz
 103:main.c        ****       eventuell D=1, N=64 (LCDCD0 = 0) LCDPS0=1 für 64 Hz, ausprobieren
 104:main.c        **** */
 105:main.c        ****  
 106:main.c        **** LCDCCR = (1<<LCDDC2)|(0<<LCDDC1)|(0<<LCDDC0)|(/*config.lcd_contrast*/ 10 << LCDCC0);
 191               		.loc 1 106 0
 192 008a 8AE8      		ldi r24,lo8(-118)
 193 008c 8093 E700 		sts 231,r24
 107:main.c        **** /*
 108:main.c        ****       (1<<LCDDC2)|(0<<LCDDC1)|(0<<LCDDC0)   // 575 µs
 109:main.c        ****       // 3,1V
 110:main.c        ****       |(config.lcd_contrast << LCDCC0);     // Set the initial LCD contrast level
 111:main.c        **** */
 112:main.c        ****  
 113:main.c        **** LCDCRA = (1<<LCDEN)|(1<<LCDAB)|(0<<LCDIE)|(0<<LCDBL);
 194               		.loc 1 113 0
 195 0090 80EC      		ldi r24,lo8(-64)
 196 0092 8093 E400 		sts 228,r24
 197               	/* epilogue start */
 114:main.c        **** /*
 115:main.c        ****       (1<<LCDEN)    // Enable LCD
 116:main.c        ****       |(1<<LCDAB)   // Low Power Waveform
 117:main.c        ****       |(0<<LCDIE)   // disable Interrupt
 118:main.c        ****       |(0<<LCDBL);  // No Blanking
 119:main.c        **** */
 120:main.c        **** }
 198               		.loc 1 120 0
 199 0096 0895      		ret
 200               	.LFE9:
 202               	.global	adcInit
 204               	adcInit:
 205               	.LFB10:
 121:main.c        **** 
 122:main.c        **** void adcInit(void)
 123:main.c        **** {
 206               		.loc 1 123 0
 207               	/* prologue: function */
 208               	/* frame size = 0 */
 209               	/* stack size = 0 */
 210               	.L__stack_usage = 0
 124:main.c        ****   ADCSRA = (1 << ADPS2) | (1 << ADEN);	// Fclk/16
 211               		.loc 1 124 0
 212 0098 84E8      		ldi r24,lo8(-124)
 213 009a 8093 7A00 		sts 122,r24
 125:main.c        ****   ADMUX = (1 << REFS0);
 214               		.loc 1 125 0
 215 009e 80E4      		ldi r24,lo8(64)
 216 00a0 8093 7C00 		sts 124,r24
 217               	/* epilogue start */
 126:main.c        **** }
 218               		.loc 1 126 0
 219 00a4 0895      		ret
 220               	.LFE10:
 222               		.comm Flags,1,1
 223               		.comm KeysPressed,1,1
 328               	.Letext0:
 329               		.file 3 "/usr/lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h"
 330               		.file 4 "/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccioR9ax.s:2      *ABS*:000000000000003f __SREG__
     /tmp/ccioR9ax.s:3      *ABS*:000000000000003e __SP_H__
     /tmp/ccioR9ax.s:4      *ABS*:000000000000003d __SP_L__
     /tmp/ccioR9ax.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccioR9ax.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccioR9ax.s:13     .text:0000000000000000 __vector_3
                            *COM*:0000000000000001 KeysPressed
                            *COM*:0000000000000001 Flags
     /tmp/ccioR9ax.s:85     .text:000000000000003e sysSleep
     /tmp/ccioR9ax.s:108    .text:000000000000004e pwrInit
     /tmp/ccioR9ax.s:125    .text:0000000000000056 ioInit
     /tmp/ccioR9ax.s:154    .text:000000000000006c buttonInit
     /tmp/ccioR9ax.s:178    .text:000000000000007e lcdInit
     /tmp/ccioR9ax.s:204    .text:0000000000000098 adcInit

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
